#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IssuerBankServiceServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbBankIssuer")]
	public partial class dbBankIssuerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    partial void Insertcredit_card(credit_card instance);
    partial void Updatecredit_card(credit_card instance);
    partial void Deletecredit_card(credit_card instance);
    partial void Inserttrade(trade instance);
    partial void Updatetrade(trade instance);
    partial void Deletetrade(trade instance);
    #endregion
		
		public dbBankIssuerDataContext() : 
				base(global::IssuerBankServiceServer.Properties.Settings.Default.dbBankIssuerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbBankIssuerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbBankIssuerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbBankIssuerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbBankIssuerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		public System.Data.Linq.Table<credit_card> credit_cards
		{
			get
			{
				return this.GetTable<credit_card>();
			}
		}
		
		public System.Data.Linq.Table<trade> trades
		{
			get
			{
				return this.GetTable<trade>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_account;
		
		private string _username;
		
		private string _password;
		
		private string _name;
		
		private decimal _balance;
		
		private int _account_number;
		
		private EntitySet<credit_card> _credit_cards;
		
		private EntitySet<trade> _trades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_accountChanging(int value);
    partial void Onid_accountChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnbalanceChanging(decimal value);
    partial void OnbalanceChanged();
    partial void Onaccount_numberChanging(int value);
    partial void Onaccount_numberChanged();
    #endregion
		
		public account()
		{
			this._credit_cards = new EntitySet<credit_card>(new Action<credit_card>(this.attach_credit_cards), new Action<credit_card>(this.detach_credit_cards));
			this._trades = new EntitySet<trade>(new Action<trade>(this.attach_trades), new Action<trade>(this.detach_trades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balance", DbType="Decimal(18,0) NOT NULL")]
		public decimal balance
		{
			get
			{
				return this._balance;
			}
			set
			{
				if ((this._balance != value))
				{
					this.OnbalanceChanging(value);
					this.SendPropertyChanging();
					this._balance = value;
					this.SendPropertyChanged("balance");
					this.OnbalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_account_number", DbType="Int NOT NULL")]
		public int account_number
		{
			get
			{
				return this._account_number;
			}
			set
			{
				if ((this._account_number != value))
				{
					this.Onaccount_numberChanging(value);
					this.SendPropertyChanging();
					this._account_number = value;
					this.SendPropertyChanged("account_number");
					this.Onaccount_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_credit_card", Storage="_credit_cards", ThisKey="id_account", OtherKey="id_account")]
		public EntitySet<credit_card> credit_cards
		{
			get
			{
				return this._credit_cards;
			}
			set
			{
				this._credit_cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_trade", Storage="_trades", ThisKey="id_account", OtherKey="id_account")]
		public EntitySet<trade> trades
		{
			get
			{
				return this._trades;
			}
			set
			{
				this._trades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_credit_cards(credit_card entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_credit_cards(credit_card entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
		
		private void attach_trades(trade entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_trades(trade entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.credit_card")]
	public partial class credit_card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_creditCard;
		
		private int _id_account;
		
		private decimal _limit;
		
		private string _cc_number;
		
		private System.DateTime _expiry_date;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_creditCardChanging(int value);
    partial void Onid_creditCardChanged();
    partial void Onid_accountChanging(int value);
    partial void Onid_accountChanged();
    partial void OnlimitChanging(decimal value);
    partial void OnlimitChanged();
    partial void Oncc_numberChanging(string value);
    partial void Oncc_numberChanged();
    partial void Onexpiry_dateChanging(System.DateTime value);
    partial void Onexpiry_dateChanged();
    #endregion
		
		public credit_card()
		{
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_creditCard", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_creditCard
		{
			get
			{
				return this._id_creditCard;
			}
			set
			{
				if ((this._id_creditCard != value))
				{
					this.Onid_creditCardChanging(value);
					this.SendPropertyChanging();
					this._id_creditCard = value;
					this.SendPropertyChanged("id_creditCard");
					this.Onid_creditCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", DbType="Int NOT NULL")]
		public int id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_limit", DbType="Decimal(18,0) NOT NULL")]
		public decimal limit
		{
			get
			{
				return this._limit;
			}
			set
			{
				if ((this._limit != value))
				{
					this.OnlimitChanging(value);
					this.SendPropertyChanging();
					this._limit = value;
					this.SendPropertyChanged("limit");
					this.OnlimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cc_number", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string cc_number
		{
			get
			{
				return this._cc_number;
			}
			set
			{
				if ((this._cc_number != value))
				{
					this.Oncc_numberChanging(value);
					this.SendPropertyChanging();
					this._cc_number = value;
					this.SendPropertyChanged("cc_number");
					this.Oncc_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expiry_date", DbType="DateTime NOT NULL")]
		public System.DateTime expiry_date
		{
			get
			{
				return this._expiry_date;
			}
			set
			{
				if ((this._expiry_date != value))
				{
					this.Onexpiry_dateChanging(value);
					this.SendPropertyChanging();
					this._expiry_date = value;
					this.SendPropertyChanged("expiry_date");
					this.Onexpiry_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_credit_card", Storage="_account", ThisKey="id_account", OtherKey="id_account", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.credit_cards.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.credit_cards.Add(this);
						this._id_account = value.id_account;
					}
					else
					{
						this._id_account = default(int);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trade")]
	public partial class trade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_trade;
		
		private int _id_account;
		
		private decimal _amount;
		
		private System.DateTime _time;
		
		private string _description;
		
		private string _issuer;
		
		private string _trade_type;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_tradeChanging(int value);
    partial void Onid_tradeChanged();
    partial void Onid_accountChanging(int value);
    partial void Onid_accountChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnissuerChanging(string value);
    partial void OnissuerChanged();
    partial void Ontrade_typeChanging(string value);
    partial void Ontrade_typeChanged();
    #endregion
		
		public trade()
		{
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_trade", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_trade
		{
			get
			{
				return this._id_trade;
			}
			set
			{
				if ((this._id_trade != value))
				{
					this.Onid_tradeChanging(value);
					this.SendPropertyChanging();
					this._id_trade = value;
					this.SendPropertyChanged("id_trade");
					this.Onid_tradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", DbType="Int NOT NULL")]
		public int id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Decimal(18,0) NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime NOT NULL")]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_issuer", DbType="VarChar(18) NOT NULL", CanBeNull=false)]
		public string issuer
		{
			get
			{
				return this._issuer;
			}
			set
			{
				if ((this._issuer != value))
				{
					this.OnissuerChanging(value);
					this.SendPropertyChanging();
					this._issuer = value;
					this.SendPropertyChanged("issuer");
					this.OnissuerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trade_type", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string trade_type
		{
			get
			{
				return this._trade_type;
			}
			set
			{
				if ((this._trade_type != value))
				{
					this.Ontrade_typeChanging(value);
					this.SendPropertyChanging();
					this._trade_type = value;
					this.SendPropertyChanged("trade_type");
					this.Ontrade_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_trade", Storage="_account", ThisKey="id_account", OtherKey="id_account", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.trades.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.trades.Add(this);
						this._id_account = value.id_account;
					}
					else
					{
						this._id_account = default(int);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
